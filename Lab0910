#include <iostream>
#include <algorithm>

class Fraction {
private:
    int numerator;
    int denominator;

    void simplify() {
        int gcd = std::__gcd(numerator, denominator);
        numerator /= gcd;
        denominator /= gcd;
        if (denominator < 0) { // Ensure denominator is always positive
            numerator = -numerator;
            denominator = -denominator;
        }
    }

public:
    // Constructor
    Fraction(int num = 0, int den = 1) : numerator(num), denominator(den) {
        if (denominator == 0) {
            throw std::invalid_argument("Denominator cannot be zero");
        }
        simplify();
    }

    // Overloading input stream operator (>>)
    friend std::istream& operator>>(std::istream& in, Fraction& f) {
        char slash;
        in >> f.numerator >> slash >> f.denominator;
        if (f.denominator == 0) {
            throw std::invalid_argument("Denominator cannot be zero");
        }
        f.simplify();
        return in;
    }

    // Overloading output stream operator (<<)
    friend std::ostream& operator<<(std::ostream& out, const Fraction& f) {
        out << f.numerator << "/" << f.denominator;
        return out;
    }

    // Arithmetic Operators
    Fraction operator+(const Fraction& other) const {
        int num = numerator * other.denominator + other.numerator * denominator;
        int den = denominator * other.denominator;
        return Fraction(num, den);
    }

    Fraction operator-(const Fraction& other) const {
        int num = numerator * other.denominator - other.numerator * denominator;
        int den = denominator * other.denominator;
        return Fraction(num, den);
    }

    Fraction operator*(const Fraction& other) const {
        return Fraction(numerator * other.numerator, denominator * other.denominator);
    }

    Fraction operator/(const Fraction& other) const {
        return Fraction(numerator * other.denominator, denominator * other.numerator);
    }

    // Comparison Operators
    bool operator==(const Fraction& other) const {
        return numerator == other.numerator && denominator == other.denominator;
    }

    bool operator!=(const Fraction& other) const {
        return !(*this == other);
    }

    bool operator<(const Fraction& other) const {
        return numerator * other.denominator < other.numerator * denominator;
    }

    bool operator>(const Fraction& other) const {
        return numerator * other.denominator > other.numerator * denominator;
    }

    bool operator<=(const Fraction& other) const {
        return !(*this > other);
    }

    bool operator>=(const Fraction& other) const {
        return !(*this < other);
    }
};

int main() {
    Fraction f1, f2;

    std::cout << "Enter first fraction (format: numerator/denominator): ";
    std::cin >> f1;
    std::cout << "Enter second fraction (format: numerator/denominator): ";
    std::cin >> f2;

    std::cout << "f1: " << f1 << ", f2: " << f2 << "\n";
    std::cout << "Sum: " << (f1 + f2) << "\n";
    std::cout << "Difference: " << (f1 - f2) << "\n";
    std::cout << "Product: " << (f1 * f2) << "\n";
    std::cout << "Quotient: " << (f1 / f2) << "\n";

    if (f1 < f2) {
        std::cout << "f1 is less than f2.\n";
    } else if (f1 > f2) {
        std::cout << "f1 is greater than f2.\n";
    } else {
        std::cout << "f1 and f2 are equal.\n";
    }

    return 0;
}
