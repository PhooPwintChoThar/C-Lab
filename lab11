#include<iostream>
#include<vector>
#include<cstdlib>
using namespace std;

class Spacecraft{
    private :
    string name , propulsion ;
    int hullStrength;
    int speed;

    void setName(string & n){
        name=n;
    }

    void setpropulsion(string & p){
        propulsion=p;
    }

    void setHullStrength (int h){
        if (h>=0 && h<=100)
        hullStrength=h;
        else
        hullStrength=50;
    }

    void setSpeed (int s){
         if (s>=0 && s<=100)
         speed=s;
         else
         speed=50;

    }

    public:
    Spacecraft (const string& n, const string& p, int hs, int s){
        setName(n);
        setHullStrength(hs);
        setpropulsion(p);
        setSpeed(s);
    }

    string getName(){
        return name;
    }

    string getPropulsion () {
        return propulsion;
    }

    int getHullStrength () {
        return hullStrength;
    }

    int getSpeed (){
        return speed;
    }

};


class AlienShip : public Spacecraft {
    private :

    int evasionChance;

    void setEvasionChance (int e){
        if (e>=0 && e<=100)
        evasionChance=e;
        else
        evasionChance=50;
    } 

    public:
    AlienShip ( const string& n , const string& p , int h, int s ,int e){
        Spacecraft(n , p , h, s);
        setEvasionChance(e);
    }

    int getEvasionChance const(){
       return evasionChance;
    }

    bool attemptFlee (){
        int num=rand();
        if (num < getEvasionChance())
        return true;
        else 
        false;
    }
};

class FleetShip : public Spacecraft {
    public:
    FleetShip (  const string& n , const string& p , int h, int s ,){
        Spacecraft(n , p , h, s);

    }

};

class Scanner {

    private :

    string name;
    int range;

    void setName( string & n) const {
        name = n;
    }

    void setRange ( int r) const{
        if (r>=0 && r<=100)
        range=r;
        else
        range=40;     
    }

    public :


    Scanner ( const string& name , int range){
        setName(name);
        setRange(range);
    }

    bool scanShip( const AlienShip& target) const{

        return (rand()%100) < 100 ;

    }

    string getName() const {
        return name;
    }

    int getRange() const {
        return range;
    }

};

class TractorBeam {
    private :
    string name;
    int strength;

    void setName( string & n) const {
        name = n;
    }

    void setStrength ( int s) const{
        if (s>=0 && s<=100)
        strength=s;
        else
        strength=20;     
    }


    public:
    TractorBeam( const string& n, int s) {
        setName(n);
        setStrength(s);
    }

    void getStrength(){
        return strength;
    }

    int captueShip ( const AlienShip& target) const{
        return strength - (target.getHullStrength()/5);
    }
};


class Player {
    vector<Scanner> scanners;
    vector<FleetShip> fleet;
    TractorBeam* tractorBeam;

    public:

    Player(){
        tractorBeam= nullptr;
    }
    void addScanner(const Scanner& scanner){
        scanners.push_back(scanner);
    }

    void equipTractorBeam (TractorBeam* beam){
        tractorBeam=beam;
    }

    bool captureShip ( const AlienShip& target , int scannerIndex) {
        if (scannerIndex<0 ||scannerIndex>=scanners.size() || scanners[scannerIndex].scanShip(target)){
            scanners.erase(scannerIndex);
            return false;
        }


    }
};
